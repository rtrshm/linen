{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["ModuleEntry","props","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAoDA,IAOMA,E,kDACJ,WAAYC,GAAa,uCACjBA,G,qDAIN,OAAO,8C,GANeC,IAAMC,WAyBjBC,MAff,WAOE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCnEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ab31bad.chunk.js","sourcesContent":["import React from 'react';\r\n// import logo from 'src/logo.svg';\r\nimport './App.css';\r\n// import * as request from 'request-promise-native';\r\n\r\ninterface Response {\r\n    // the unique identifier for the module\r\n    id: number,\r\n    // the state of the module: 'active', 'deleted'\r\n    workflow_state: string,\r\n    // the position of this module in the course (1-based)\r\n    position: number,\r\n    // the name of this module\r\n    name: string,\r\n    // (Optional) the date this module will unlock\r\n    unlock_at: string,\r\n    // Whether module items must be unlocked in order\r\n    require_sequential_progress: boolean,\r\n    // IDs of Modules that must be completed before this one is unlocked\r\n    prerequisite_module_ids: number[],\r\n    // The number of items in the module\r\n    items_count: number,\r\n    // The API URL to retrive this module's items\r\n    items_url: string,\r\n    // The contents of this module, as an array of Module Items. (Present only if\r\n    // requested via include[]=items AND the module is not deemed too large by\r\n    // Canvas.)\r\n    items: null,\r\n    // The state of this Module for the calling user one of 'locked', 'unlocked',\r\n    // 'started', 'completed' (Optional; present only if the caller is a student or\r\n    // if the optional parameter 'student_id' is included)\r\n    state: string\r\n    // the date the calling user completed the module (Optional; present only if the\r\n    // caller is a student or if the optional parameter 'student_id' is included)\r\n    completed_at: null,\r\n    // if the student's final grade for the course should be published to the SIS\r\n    // upon completion of this module\r\n    publish_final_grade: null,\r\n    // (Optional) Whether this module is published. This field is present only if\r\n    // the caller has permission to view unpublished modules.\r\n    published: true,\r\n\r\n}\r\n// https://stackoverflow.com/questions/38428027/why-await-is-not-working-for-node-request-module\r\nexport async function http<T>(\r\n  request: RequestInfo\r\n): Promise<T> {\r\n  const response = await fetch(request);\r\n  const body = await response.json();\r\n  return body;\r\n}\r\n\r\nconst data = async() =>  {\r\n  const response = await http<Response[]>(\r\n  'sit.test.instructure.com/api/v1/courses'\r\n  );\r\n  return response;\r\n}\r\n\r\nclass ModuleEntry extends React.Component {\r\n  constructor(props: any) {\r\n    super(props);\r\n  }\r\n  \r\n  render () {\r\n    return <p>Hello world</p>;\r\n  }\r\n};\r\n\r\nfunction App()  {\r\n  // useEffect(() => {\r\n  //     // Example of how to send a message to eventPage.ts.\r\n  //     chrome.runtime.sendMessage({ popupMounted: true });\r\n  //   }, []);\r\n  //   return <div className=\"popupContainer\">Hello, world!</div>;\r\n  // }\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <ModuleEntry /> \r\n      </header> \r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n// {/* <p>\r\n//   Edit <code>src/App.tsx</code> and save to reload.\r\n// </p> */\r\n// /* <a\r\n//   className=\"App-link\"\r\n//   href=\"https://reactjs.org\"\r\n//   target=\"_blank\"\r\n//   rel=\"noopener noreferrer\"\r\n// >\r\n//   Learn React */\r\n// /* </a>} */\r\n\r\n\r\n// function fetchModules(): Promise<any> {\r\n// const baseUrl = 'sit.test.instructure.com/api/v1/courses/:course_id/modules';\r\n// const response = await fetch(baseUrl);\r\n// const body = await response.json();\r\n//   });\r\n// }\r\n// }\r\n\r\n// async function requestModules () {\r\n  \r\n//   var opts = {\r\n//     method:'GET',\r\n//     uri: baseUrl\r\n//   }\r\n\r\n// var response = {\r\n//   \"id\":0,\r\n//   \"name\": \"\",\r\n// }\r\n\r\n\r\n//   const response = await request(opts)\r\n//     .then(response => {\r\n//       console.log(response)\r\n//       return (response.id)\r\n//     })\r\n//     .catch(error => {\r\n//       console.timeLog(\"exception: \" + error);\r\n//     })\r\n// }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}